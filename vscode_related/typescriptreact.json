{
  "Print to console": {
		"prefix": "log",
		"body": [
			"console.log('TESTING LOG HERE', $1);"
		],
		"description": "Log output to console"
	},
  "import * as React from 'react';": {
    "prefix": "imr",
    "body": [
      "import * as React from 'react';"
    ]
  },
  "sleep": {
    "prefix": "sleep",
    "body": [
      ".then((response: any) -> new Promise((resolve: any) => setTimeout(() => resolve(response, 1000)))"
    ],
    "description": "Sleep a promise for 1 second"
  },
  "Mock history push": {
    "prefix": "mhis",
    "body": [
      "const mockHistoryPush = jest.fn();",
      "jest.mock('react-router-dom', () =< ({",
      "  ...jest.requireActual('react-router-dom'),",
      "  useHistory: () => ({ push: mockHistoryPush }),",
      "}));"
    ],
    "description": "Use a local mockHistory jest.fn() to test history changes through react-router"
  },
  "describe(...)": {
    "prefix": "ds",
    "body": [
      "describe('${1:is something}', () => {",
      "  $2",
      "});"
    ]
  },
  "it(...)": {
    "prefix": "it",
    "body": [
      "it('${1:does something}', () => {",
      "  ${2:expect(1).toEqual(2);}",
      "});"
    ]
  },
  "beforeEach(...)": {
    "prefix": "bfe",
    "body": [
      "beforeEach(() => {",
      "  $2",
      "});"
    ]
  },
  "afterEach(...)": {
    "prefix": "afe",
    "body": [
      "afterEach(() => {",
      "  $2",
      "});"
    ]
  },
  "afterAll(...)": {
    "prefix": "afa",
    "body": [
      "afterAll(() => {",
      "  $2",
      "});"
    ]
  },
  "Await act async": {
    "prefix": "aaa",
    "body": [
      "await act(async () => {",
      "  await $2",
      "});"
    ],
    "description": "In jest tests, await an async act"
  },
  "Functional Component const notation": {
    "prefix": "cfc",
    "body": [
      "interface ${1:Component}Props {",
      "  //",
      "}",
      "const ${1:Component}: FC<$${1:Component}Props> => {",
      "  const {} = props;",
      "  return <div>Replace Me!</div>;",
      "};"
    ]
  }
}